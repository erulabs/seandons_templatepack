#
# Cookbook Name:: |{ cookbook['name'] }|
# Recipe :: |{ options['name'] }|
#
# Copyright |{ cookbook['year'] }|, Rackspace
#

# The MySQL server recipe, which runs MariaDB 10.0
# TODO: Easy Master/Slave replication via tagging

%w(debconf-utils percona-xtrabackup rsync).each do |pkg|
  package pkg do
    action :install
  end
end

# Tune MySQL automagically
open_files_limit = 8192

# Consider using "rackspace_networks" stencil for easy networking magic :)
if node['address_map'].nil?
  # Use servicenet by default - NOT RECOMMENED - flip to false and make use of a cloud network
  # see "rackspace_networks" for more.
  node.default['address_map'] = {}
  node.default['address_map']['use_service_net'] = true
  iface = 'eth1'
  node.default['address_map']['service_net_iface'] = iface
  mysql_listen_address = node['network']['interfaces'][iface]['addresses'].find do |addr, addr_info|
    addr_info[:family] == 'inet'
  end
  mysql_listen_address = mysql_listen_address.first
else
  mysql_listen_address = node['address_map']['my_ip']
end

# Default to assuming our server is a 1gb slice
system_total_mem_mb = '1024'
unless node['memory']['total'].nil?
  system_total_mem_mb = (node['memory']['total'].gsub(/kB/, '').to_i / 1024).round
end

# The service is now totally installed and configured - time to configure the cluster
node.default['mariadb']['debian']['user'] = 'root'
node.default['mariadb']['debian']['password'] = node['mysql']['server_root_password']
node.default['mariadb']['debian']['host'] = mysql_listen_address

# Preseed MySQL installation with paswords, etc.
begin
  resources(directory: '/var/cache/local/preseeding')
rescue Chef::Exceptions::ResourceNotFound
  directory '/var/cache/local/preseeding' do
    owner 'root'
    group 'root'
    mode '0755'
    recursive true
  end
end
template '/var/cache/local/preseeding/mariadb-server.seed' do
  source 'mariadb/server-seed.erb'
  owner 'root'
  group 'root'
  mode '0600'
  variables(package_name: 'mariadb-server')
  notifies :run, 'execute[preseed mariadb-server]', :immediately
end
execute 'preseed mariadb-server' do
  command '/usr/bin/debconf-set-selections /var/cache/local/preseeding/mariadb-server.seed'
  action :nothing
end

# Add the MariaDB 10 repo
case node['platform']
when 'debian', 'ubuntu'
  apt_repository 'mariadb' do
    uri 'http://ftp.osuosl.org/pub/mariadb/repo/10.0/ubuntu'
    distribution node['lsb']['codename']
    components ['main']
    # Force use of port 80 for keyserver transaction
    # this bypasses issues with strict firewalls on testing machines
    keyserver 'hkp://keyserver.ubuntu.com:80'
    key '0xcbcb082a1bb943db'
  end
when 'redhat', 'centos', 'fedora', 'amazon', 'scientific'
  yum_repository 'MariaDB' do
    description 'MariaDB 10.0 Repo'
    mirrorlist 'http://yum.mariadb.org/10.0/centos6-amd64'
    gpgkey 'https://yum.mariadb.org/RPM-GPG-KEY-MariaDB'
    action :create
  end
end

# Install mariadb server!
package 'mariadb-server' do
  action [:upgrade, :install]
end

# MySQL ulimit setting
user_ulimit 'mysql' do
  filehandle_limit open_files_limit
  core_hard_limit 'unlimited'
end

# Allow passwordless logins for admins
template '/root/.my.cnf' do
  source 'mariadb/.my.cnf.erb'
  owner 'root'
  group 'root'
  mode '0600'
  variables(
    pass: node['mysql']['server_root_password']
  )
end

template '/etc/mysql/my.cnf' do
  source 'mariadb/my.cnf.erb'
  owner 'root'
  group 'root'
  mode '0600'
  variables(
    listen: mysql_listen_address,
    server_id: mysql_listen_address.gsub(/\./, ''),
    open_files_limit: 65_535,
    table_open_cache: (open_files_limit / 4).round,
    # innodb_buffer_pool_size will be 50% of the systems total memory
    innodb_buffer_pool_size: (system_total_mem_mb / 3).round,
    innodb_log_file_size: (system_total_mem_mb / 32).round,
    innodb_log_buffer_size: (system_total_mem_mb / 32).round,
    # MariaDB does not need a very large connection pool - particularly when paired with PHP 5.6
    # which is quite good at closing connections - we'll allow 15 connections per GB of memory for now
    # which is fairly arbitrary, but makes an OK baseline
    max_connections: ((system_total_mem_mb / 1024).round + 1) * 15,
    tmp_table_size: (system_total_mem_mb / 32).round,
    query_cache_size: (system_total_mem_mb / 32).round
  )
  notifies :restart, 'service[mysql]'
end

# Ensure service is runing
service 'mysql' do
  service_name 'mysql'
  supports restart: true, status: true
  action [:enable, :start]
  retries 1
  retry_delay 3
  # notifies :create, 'template[/root/constants.sql]', :immediate
end

tag('mysql_master')

